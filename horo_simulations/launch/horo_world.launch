<?xml version="1.0" encoding="UTF-8"?>

<launch>
    <!-- Launch arguments -->
    <arg name="debug" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="pause" default="false"/>
    <arg name="world" default="$(find horo_simulations)/worlds/horo.world"/>
    
    <!-- TurtleBot -->
    <arg name="tb_model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>
    <arg name="tb_x" default="1.3"/>
    <arg name="tb_y" default="0.2"/>
    <arg name="tb_z" default="0"/>
    <arg name="tb_roll" default="0"/>
    <arg name="tb_pitch" default="0"/>
    <arg name="tb_yaw" default="3.1416"/>
    
    <!-- Include gazebo_ros launcher -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)"/>
        <arg name="verbose" value="false" />
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg pause)"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="headless" value="false"/>
    </include>
    
    <!-- Include TurtleBot-->
    <param name="turtlebot3_description"
        command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg tb_model).urdf.xacro" />
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_turtlebot_urdf"  
        args="-urdf -model turtlebot3_$(arg tb_model) 
        -x $(arg tb_x) 
        -y $(arg tb_y) 
        -z $(arg tb_z) 
        -R $(arg tb_roll) 
        -P $(arg tb_pitch) 
        -Y $(arg tb_yaw)
        -param turtlebot3_description" />


    <!-- uArms -->
    
    <!--Load urdf to param server-->
    <param name="robot_description"
        command="$(find xacro)/xacro --inorder '$(find swiftpro_description)/urdf/swiftpro1/swiftpro1.xacro'"/>

    <param name="robot2_description"
        command="$(find xacro)/xacro --inorder '$(find swiftpro_description)/urdf/swiftpro2/swiftpro2.xacro'"/>

    <!--GUI used to send fake joint values-->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="false"/>
    </node>

    <!-- <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"/> -->

    <!--Publish robot state to TF-->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <remap from="/joint_states" to="/swiftpro/joint_states" />
    </node>

    <!-- Robot pose -->
    <arg name="sp_x" default="1.5"/>
    <arg name="sp1_y" default="1"/>
    <arg name="sp2_y" default="0.5"/>
    <arg name="sp_z" default="0"/>
    <arg name="sp_roll" default="0"/>
    <arg name="sp_pitch" default="0"/>
    <arg name="sp_yaw" default="3.1416"/>

  <!-- Spawn uArm 1-->
  <node name="spawn_swiftpro1_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
        args="
            -urdf 
            -param robot_description 
            -model swiftpro1
            -x $(arg sp_x) 
            -y $(arg sp1_y) 
            -z $(arg sp_z)
            -R $(arg sp_roll) 
            -P $(arg sp_pitch) 
            -Y $(arg sp_yaw)
    "/>

  <!-- Spawn uArm 2-->
  <node name="spawn_swiftpro2_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
        args="
            -urdf 
            -param robot2_description 
            -model swiftpro2
            -x $(arg sp_x) 
            -y $(arg sp2_y) 
            -z $(arg sp_z)
            -R $(arg sp_roll) 
            -P $(arg sp_pitch) 
            -Y $(arg sp_yaw)
    "/>
</launch>